package DSLTrans.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.core.base.editor.HorizLineCell;
import java.awt.Color;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import com.mbeddr.core.base.editor.important_StyleSheet;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.nodeEditor.InlineCellProvider;

public class Transformation_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_hm7qup_a(editorContext, node);
  }
  private EditorCell createCollection_hm7qup_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_hm7qup_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createCustom_hm7qup_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_hm7qup_b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_hm7qup_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_hm7qup_d0(editorContext, node));
    editorCell.addEditorCell(this.createCustom_hm7qup_e0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCustom_hm7qup_a0(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizLineCell>() {
      public HorizLineCell invoke() {
        return new HorizLineCell(node, Color.BLACK, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_hm7qup_a0");
    return editorCell;
  }
  private EditorCell createConstant_hm7qup_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_hm7qup_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_hm7qup_c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_hm7qup_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.FONT_SIZE, 0, 16);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_hm7qup_a2a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_hm7qup_b2a(editorContext, node));
    editorCell.addEditorCell(this.createIndentCell_hm7qup_c2a(editorContext, node));
    editorCell.addEditorCell(this.createIndentCell_hm7qup_d2a(editorContext, node));
    editorCell.addEditorCell(this.createIndentCell_hm7qup_e2a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_hm7qup_f2a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_hm7qup_g2a(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_hm7qup_h2a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_hm7qup_i2a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_hm7qup_a2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "DSLTrans Transformation Name:");
    editorCell.setCellId("Constant_hm7qup_a2a");
    Style style = new StyleImpl();
    important_StyleSheet.apply_important(style, editorCell);
    style.set(StyleAttributes.FONT_STYLE, 0, MPSFonts.PLAIN);
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_hm7qup_b2a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createIndentCell_hm7qup_c2a(EditorContext editorContext, SNode node) {
    EditorCell_Indent editorCell = new EditorCell_Indent(editorContext, node);
    return editorCell;
  }
  private EditorCell createIndentCell_hm7qup_d2a(EditorContext editorContext, SNode node) {
    EditorCell_Indent editorCell = new EditorCell_Indent(editorContext, node);
    return editorCell;
  }
  private EditorCell createIndentCell_hm7qup_e2a(EditorContext editorContext, SNode node) {
    EditorCell_Indent editorCell = new EditorCell_Indent(editorContext, node);
    return editorCell;
  }
  private EditorCell createConstant_hm7qup_f2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "|");
    editorCell.setCellId("Constant_hm7qup_f2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_hm7qup_g2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Input Language: ");
    editorCell.setCellId("Constant_hm7qup_g2a");
    Style style = new StyleImpl();
    important_StyleSheet.apply_important(style, editorCell);
    style.set(StyleAttributes.FONT_STYLE, 0, MPSFonts.PLAIN);
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefCell_hm7qup_h2a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("inputLanguage");
    provider.setNoTargetText("<no inputLanguage>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Transformation_Editor._Inline_hm7qup_a7c0());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("inputLanguage");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  public static class _Inline_hm7qup_a7c0 extends InlineCellProvider {
    public _Inline_hm7qup_a7c0() {
      super();
    }
    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }
    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_hm7qup_a0h2a(editorContext, node);
    }
    private EditorCell createProperty_hm7qup_a0h2a(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_name_1");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
        return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }
  private EditorCell createConstant_hm7qup_i2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "|");
    editorCell.setCellId("Constant_hm7qup_i2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_hm7qup_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_hm7qup_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCustom_hm7qup_e0(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizLineCell>() {
      public HorizLineCell invoke() {
        return new HorizLineCell(node, Color.BLACK, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_hm7qup_e0");
    return editorCell;
  }
}
