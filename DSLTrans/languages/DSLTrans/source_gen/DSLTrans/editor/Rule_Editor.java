package DSLTrans.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.core.base.editor.HorizLineCell;
import java.awt.Color;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;

public class Rule_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_z0m96w_a(editorContext, node);
  }
  private EditorCell createCollection_z0m96w_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_z0m96w_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createIndentCell_z0m96w_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_z0m96w_b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createIndentCell_z0m96w_a0(EditorContext editorContext, SNode node) {
    EditorCell_Indent editorCell = new EditorCell_Indent(editorContext, node);
    return editorCell;
  }
  private EditorCell createCollection_z0m96w_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_z0m96w_b0");
    editorCell.addEditorCell(this.createCustom_z0m96w_a1a(editorContext, node));
    editorCell.addEditorCell(this.createCustom_z0m96w_b1a(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_z0m96w_c1a(editorContext, node));
    editorCell.addEditorCell(this.createCustom_z0m96w_d1a(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_z0m96w_e1a(editorContext, node));
    editorCell.addEditorCell(this.createCustom_z0m96w_f1a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_z0m96w_g1a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_z0m96w_h1a(editorContext, node));
    editorCell.addEditorCell(this.createRefNodeList_z0m96w_i1a(editorContext, node));
    editorCell.addEditorCell(this.createCustom_z0m96w_j1a(editorContext, node));
    editorCell.addEditorCell(this.createCustom_z0m96w_k1a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_z0m96w_l1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createCustom_z0m96w_a1a(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizLineCell>() {
      public HorizLineCell invoke() {
        return new HorizLineCell(node, Color.GRAY, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_z0m96w_a1a");
    return editorCell;
  }
  private EditorCell createCustom_z0m96w_b1a(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizLineCell>() {
      public HorizLineCell invoke() {
        return new HorizLineCell(node, Color.GRAY, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_z0m96w_b1a");
    return editorCell;
  }
  private EditorCell createRefNode_z0m96w_c1a(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new Rule_Editor.matchModelSingleRoleHandler_z0m96w_c1a(node, MetaAdapterFactory.getContainmentLink(0x4e1e6c633ef54d3dL, 0xb04d0e2974d639e7L, 0x352209af6691d6dfL, 0x61d4bac5f384b65bL, "matchModel"), editorContext);
    return provider.createCell();
  }
  private class matchModelSingleRoleHandler_z0m96w_c1a extends SingleRoleCellProvider {
    public matchModelSingleRoleHandler_z0m96w_c1a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("matchModel");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_matchModel");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no matchModel>";
    }
  }
  private EditorCell createCustom_z0m96w_d1a(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizLineCell>() {
      public HorizLineCell invoke() {
        return new HorizLineCell(node, Color.GRAY, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_z0m96w_d1a");
    return editorCell;
  }
  private EditorCell createRefNode_z0m96w_e1a(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new Rule_Editor.applyModelSingleRoleHandler_z0m96w_e1a(node, MetaAdapterFactory.getContainmentLink(0x4e1e6c633ef54d3dL, 0xb04d0e2974d639e7L, 0x352209af6691d6dfL, 0x61d4bac5f384b65dL, "applyModel"), editorContext);
    return provider.createCell();
  }
  private class applyModelSingleRoleHandler_z0m96w_e1a extends SingleRoleCellProvider {
    public applyModelSingleRoleHandler_z0m96w_e1a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("applyModel");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_applyModel");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no applyModel>";
    }
  }
  private EditorCell createCustom_z0m96w_f1a(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizLineCell>() {
      public HorizLineCell invoke() {
        return new HorizLineCell(node, Color.GRAY, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_z0m96w_f1a");
    return editorCell;
  }
  private EditorCell createConstant_z0m96w_g1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Backward Links");
    editorCell.setCellId("Constant_z0m96w_g1a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.BACKGROUND_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.yellow));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_z0m96w_h1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_z0m96w_h1a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.FONT_SIZE, 0, 6);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNodeList_z0m96w_i1a(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new Rule_Editor.backwardLinksListHandler_z0m96w_i1a(node, "backwardLinks", editorContext);
    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_backwardLinks");
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }
  private static class backwardLinksListHandler_z0m96w_i1a extends RefNodeListHandler {
    public backwardLinksListHandler_z0m96w_i1a(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }
    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, editorContext, super.getElementRole());
    }
    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }
    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(editorContext);
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      return emptyCell;
    }
    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), editorContext));
        }
      }
    }
  }
  private EditorCell createCustom_z0m96w_j1a(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizLineCell>() {
      public HorizLineCell invoke() {
        return new HorizLineCell(node, Color.GRAY, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_z0m96w_j1a");
    return editorCell;
  }
  private EditorCell createCustom_z0m96w_k1a(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizLineCell>() {
      public HorizLineCell invoke() {
        return new HorizLineCell(node, Color.GRAY, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_z0m96w_k1a");
    return editorCell;
  }
  private EditorCell createConstant_z0m96w_l1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_z0m96w_l1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
